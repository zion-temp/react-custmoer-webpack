{"version":3,"sources":["webpack://react-custmoer-webpack/./node_modules/@ctrl/tinycolor/dist/module/format-input.js"],"names":["inputToRGB","color","rgb","r","g","b","a","s","v","l","ok","format","trim","toLowerCase","length","named","match","matchers","exec","rgba","hsl","h","hsla","hsv","hsva","hex8","hex6","hex4","hex3","stringInputToObject","isValidCSSUnit","String","substr","Object","prototype","hasOwnProperty","call","Math","min","max","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","Boolean"],"mappings":"mLAqBO,SAASA,EAAWC,GACvB,IAAIC,EAAM,CAAEC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GACvBC,EAAI,EACJC,EAAI,KACJC,EAAI,KACJC,EAAI,KACJC,GAAK,EACLC,GAAS,EA6Bb,MA5BqB,iBAAVV,IACPA,EAgED,SAA6BA,GAEhC,GAAqB,KADrBA,EAAQA,EAAMW,OAAOC,eACXC,OACN,OAAO,EAEX,IAAIC,GAAQ,EACZ,GAAI,IAAMd,GACNA,EAAQ,IAAMA,GACdc,GAAQ,OAEP,GAAc,gBAAVd,EACL,MAAO,CAAEE,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGK,OAAQ,QAM7C,IAAIK,EAAQC,EAASf,IAAIgB,KAAKjB,GAC9B,OAAIe,EACO,CAAEb,EAAGa,EAAM,GAAIZ,EAAGY,EAAM,GAAIX,EAAGW,EAAM,KAEhDA,EAAQC,EAASE,KAAKD,KAAKjB,IAEhB,CAAEE,EAAGa,EAAM,GAAIZ,EAAGY,EAAM,GAAIX,EAAGW,EAAM,GAAIV,EAAGU,EAAM,KAE7DA,EAAQC,EAASG,IAAIF,KAAKjB,IAEf,CAAEoB,EAAGL,EAAM,GAAIT,EAAGS,EAAM,GAAIP,EAAGO,EAAM,KAEhDA,EAAQC,EAASK,KAAKJ,KAAKjB,IAEhB,CAAEoB,EAAGL,EAAM,GAAIT,EAAGS,EAAM,GAAIP,EAAGO,EAAM,GAAIV,EAAGU,EAAM,KAE7DA,EAAQC,EAASM,IAAIL,KAAKjB,IAEf,CAAEoB,EAAGL,EAAM,GAAIT,EAAGS,EAAM,GAAIR,EAAGQ,EAAM,KAEhDA,EAAQC,EAASO,KAAKN,KAAKjB,IAEhB,CAAEoB,EAAGL,EAAM,GAAIT,EAAGS,EAAM,GAAIR,EAAGQ,EAAM,GAAIV,EAAGU,EAAM,KAE7DA,EAAQC,EAASQ,KAAKP,KAAKjB,IAEhB,CACHE,GAAG,QAAgBa,EAAM,IACzBZ,GAAG,QAAgBY,EAAM,IACzBX,GAAG,QAAgBW,EAAM,IACzBV,GAAG,QAAoBU,EAAM,IAC7BL,OAAQI,EAAQ,OAAS,SAGjCC,EAAQC,EAASS,KAAKR,KAAKjB,IAEhB,CACHE,GAAG,QAAgBa,EAAM,IACzBZ,GAAG,QAAgBY,EAAM,IACzBX,GAAG,QAAgBW,EAAM,IACzBL,OAAQI,EAAQ,OAAS,QAGjCC,EAAQC,EAASU,KAAKT,KAAKjB,IAEhB,CACHE,GAAG,QAAgBa,EAAM,GAAKA,EAAM,IACpCZ,GAAG,QAAgBY,EAAM,GAAKA,EAAM,IACpCX,GAAG,QAAgBW,EAAM,GAAKA,EAAM,IACpCV,GAAG,QAAoBU,EAAM,GAAKA,EAAM,IACxCL,OAAQI,EAAQ,OAAS,WAGjCC,EAAQC,EAASW,KAAKV,KAAKjB,KAEhB,CACHE,GAAG,QAAgBa,EAAM,GAAKA,EAAM,IACpCZ,GAAG,QAAgBY,EAAM,GAAKA,EAAM,IACpCX,GAAG,QAAgBW,EAAM,GAAKA,EAAM,IACpCL,OAAQI,EAAQ,OAAS,OA5IrBc,CAAoB5B,IAEX,iBAAVA,IACH6B,EAAe7B,EAAME,IAAM2B,EAAe7B,EAAMG,IAAM0B,EAAe7B,EAAMI,IAC3EH,GAAM,QAASD,EAAME,EAAGF,EAAMG,EAAGH,EAAMI,GACvCK,GAAK,EACLC,EAAwC,MAA/BoB,OAAO9B,EAAME,GAAG6B,QAAQ,GAAa,OAAS,OAElDF,EAAe7B,EAAMoB,IAAMS,EAAe7B,EAAMM,IAAMuB,EAAe7B,EAAMO,IAChFD,GAAI,QAAoBN,EAAMM,GAC9BC,GAAI,QAAoBP,EAAMO,GAC9BN,GAAM,QAASD,EAAMoB,EAAGd,EAAGC,GAC3BE,GAAK,EACLC,EAAS,OAEJmB,EAAe7B,EAAMoB,IAAMS,EAAe7B,EAAMM,IAAMuB,EAAe7B,EAAMQ,KAChFF,GAAI,QAAoBN,EAAMM,GAC9BE,GAAI,QAAoBR,EAAMQ,GAC9BP,GAAM,QAASD,EAAMoB,EAAGd,EAAGE,GAC3BC,GAAK,EACLC,EAAS,OAETsB,OAAOC,UAAUC,eAAeC,KAAKnC,EAAO,OAC5CK,EAAIL,EAAMK,IAGlBA,GAAI,QAAWA,GACR,CACHI,GAAIA,EACJC,OAAQV,EAAMU,QAAUA,EACxBR,EAAGkC,KAAKC,IAAI,IAAKD,KAAKE,IAAIrC,EAAIC,EAAG,IACjCC,EAAGiC,KAAKC,IAAI,IAAKD,KAAKE,IAAIrC,EAAIE,EAAG,IACjCC,EAAGgC,KAAKC,IAAI,IAAKD,KAAKE,IAAIrC,EAAIG,EAAG,IACjCC,EAAGA,GAIX,IAIIkC,EAAW,6CAIXC,EAAoB,cAAgBD,EAAW,aAAeA,EAAW,aAAeA,EAAW,YACnGE,EAAoB,cAAgBF,EAAW,aAAeA,EAAW,aAAeA,EAAW,aAAeA,EAAW,YAC7HvB,EAAW,CACXuB,SAAU,IAAIG,OAAOH,GACrBtC,IAAK,IAAIyC,OAAO,MAAQF,GACxBtB,KAAM,IAAIwB,OAAO,OAASD,GAC1BtB,IAAK,IAAIuB,OAAO,MAAQF,GACxBnB,KAAM,IAAIqB,OAAO,OAASD,GAC1BnB,IAAK,IAAIoB,OAAO,MAAQF,GACxBjB,KAAM,IAAImB,OAAO,OAASD,GAC1Bd,KAAM,uDACNF,KAAM,uDACNC,KAAM,uEACNF,KAAM,wEA2FH,SAASK,EAAe7B,GAC3B,OAAO2C,QAAQ3B,EAASuB,SAAStB,KAAKa,OAAO9B","file":"js/1350.9814cff3c7.js","sourcesContent":["import { convertHexToDecimal, hslToRgb, hsvToRgb, parseIntFromHex, rgbToRgb } from './conversion';\nimport { names } from './css-color-names';\nimport { boundAlpha, convertToPercentage } from './util';\n/**\n * Given a string or object, convert that input to RGB\n *\n * Possible string inputs:\n * ```\n * \"red\"\n * \"#f00\" or \"f00\"\n * \"#ff0000\" or \"ff0000\"\n * \"#ff000000\" or \"ff000000\"\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n * \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n * \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n * ```\n */\nexport function inputToRGB(color) {\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n    if (typeof color === 'string') {\n        color = stringInputToObject(color);\n    }\n    if (typeof color === 'object') {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = 'hsv';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = 'hsl';\n        }\n        if (Object.prototype.hasOwnProperty.call(color, 'a')) {\n            a = color.a;\n        }\n    }\n    a = boundAlpha(a);\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: Math.min(255, Math.max(rgb.r, 0)),\n        g: Math.min(255, Math.max(rgb.g, 0)),\n        b: Math.min(255, Math.max(rgb.b, 0)),\n        a: a,\n    };\n}\n// <http://www.w3.org/TR/css3-values/#integers>\nvar CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\n// <http://www.w3.org/TR/css3-values/#number-value>\nvar CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\nvar CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening paren\nvar PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\nvar PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\nvar matchers = {\n    CSS_UNIT: new RegExp(CSS_UNIT),\n    rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),\n    rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),\n    hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),\n    hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),\n    hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),\n    hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n};\n/**\n * Permissive string parsing.  Take in a number of formats, and output an object\n * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n */\nexport function stringInputToObject(color) {\n    color = color.trim().toLowerCase();\n    if (color.length === 0) {\n        return false;\n    }\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color === 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: 'name' };\n    }\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match = matchers.rgb.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    match = matchers.rgba.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    match = matchers.hsl.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    match = matchers.hsla.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    match = matchers.hsv.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    match = matchers.hsva.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    match = matchers.hex8.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex6.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    match = matchers.hex4.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            a: convertHexToDecimal(match[4] + match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex3.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    return false;\n}\n/**\n * Check to see if it looks like a CSS unit\n * (see `matchers` above for definition).\n */\nexport function isValidCSSUnit(color) {\n    return Boolean(matchers.CSS_UNIT.exec(String(color)));\n}\n"],"sourceRoot":""}