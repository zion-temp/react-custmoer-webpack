{"version":3,"sources":["webpack://react-custmoer-webpack/./node_modules/mobx-react-lite/es/utils/observerBatching.js","webpack://react-custmoer-webpack/./node_modules/mobx-react-lite/es/utils/printDebugValue.js","webpack://react-custmoer-webpack/./node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js","webpack://react-custmoer-webpack/./node_modules/mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js","webpack://react-custmoer-webpack/./node_modules/mobx-react-lite/es/utils/utils.js"],"names":["defaultNoopBatch","callback","observerBatching","reactionScheduler","printDebugValue","v","_a","addReactionToTrack","recordReactionAsCommitted","resetCleanupScheduleForTests","forceCleanupTimerToRunNowForTests","createTrackingData","reaction","mounted","changedBeforeMount","cleanAt","Date","now","CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS","CLEANUP_TIMER_LOOP_MILLIS","EMPTY_ARRAY","useForceUpdate","setTick","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__read","useState","useCallback","tick"],"mappings":"gKACO,SAASA,EAAiBC,GAC7BA,IAEG,SAASC,EAAiBC,GACxBA,IACDA,EAAoBH,IAKxB,QAAU,CAAEG,kBAAmBA,M,2DCV5B,SAASC,EAAgBC,GAC5B,OAAO,QAAkBA,K,6KCCzBC,EAAK,KACH,OAAuD,MACvD,SAA2CC,EAAqBD,EAAGC,mBAAoBC,EAA4BF,EAAGE,0BAA0DF,EAAGG,6BAAkEH,EAAGI,mC,4BCLvP,SAASC,EAAmBC,GAO/B,MANmB,CACfA,SAAUA,EACVC,SAAS,EACTC,oBAAoB,EACpBC,QAASC,KAAKC,MAAQC,G,2BAUvB,IAAIA,EAAwC,IAIxCC,EAA4B,K,2DCFnCC,EAAc,GACX,SAASC,IACZ,IAAiCC,EAnBC,SAAUC,EAAGC,GAC/C,IAAIC,EAAsB,mBAAXC,QAAyBH,EAAEG,OAAOC,UACjD,IAAKF,EAAG,OAAOF,EACf,IAAmBK,EAAYC,EAA3BC,EAAIL,EAAEM,KAAKR,GAAOS,EAAK,GAC3B,IACI,WAAc,IAANR,GAAgBA,KAAM,MAAQI,EAAIE,EAAEG,QAAQC,MAAMF,EAAGG,KAAKP,EAAEQ,OAExE,MAAOC,GAASR,EAAI,CAAEQ,MAAOA,GAC7B,QACI,IACQT,IAAMA,EAAEM,OAAST,EAAIK,EAAU,SAAIL,EAAEM,KAAKD,GAElD,QAAU,GAAID,EAAG,MAAMA,EAAEQ,OAE7B,OAAOL,EAKEM,EAAO,IAAAC,UAAS,GAAI,GAAiB,GAI9C,OAHa,IAAAC,cAAY,WACrBlB,GAAQ,SAAUmB,GAAQ,OAAOA,EAAO,OACzCrB","file":"js/2052.3b835b6a50.js","sourcesContent":["import { configure } from \"mobx\";\nexport function defaultNoopBatch(callback) {\n    callback();\n}\nexport function observerBatching(reactionScheduler) {\n    if (!reactionScheduler) {\n        reactionScheduler = defaultNoopBatch;\n        if (\"production\" !== process.env.NODE_ENV) {\n            console.warn(\"[MobX] Failed to get unstable_batched updates from react-dom / react-native\");\n        }\n    }\n    configure({ reactionScheduler: reactionScheduler });\n}\nexport var isObserverBatched = function () {\n    if (\"production\" !== process.env.NODE_ENV) {\n        console.warn(\"[MobX] Deprecated\");\n    }\n    return true;\n};\n//# sourceMappingURL=observerBatching.js.map","import { getDependencyTree } from \"mobx\";\nexport function printDebugValue(v) {\n    return getDependencyTree(v);\n}\n//# sourceMappingURL=printDebugValue.js.map","import { FinalizationRegistry as FinalizationRegistryMaybeUndefined } from \"./FinalizationRegistryWrapper\";\nimport { createReactionCleanupTrackingUsingFinalizationRegister } from \"./createReactionCleanupTrackingUsingFinalizationRegister\";\nimport { createTimerBasedReactionCleanupTracking } from \"./createTimerBasedReactionCleanupTracking\";\nvar _a = FinalizationRegistryMaybeUndefined\n    ? createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistryMaybeUndefined)\n    : createTimerBasedReactionCleanupTracking(), addReactionToTrack = _a.addReactionToTrack, recordReactionAsCommitted = _a.recordReactionAsCommitted, resetCleanupScheduleForTests = _a.resetCleanupScheduleForTests, forceCleanupTimerToRunNowForTests = _a.forceCleanupTimerToRunNowForTests;\nexport { addReactionToTrack, recordReactionAsCommitted, resetCleanupScheduleForTests, forceCleanupTimerToRunNowForTests };\n//# sourceMappingURL=reactionCleanupTracking.js.map","export function createTrackingData(reaction) {\n    var trackingData = {\n        reaction: reaction,\n        mounted: false,\n        changedBeforeMount: false,\n        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS\n    };\n    return trackingData;\n}\n/**\n * The minimum time before we'll clean up a Reaction created in a render\n * for a component that hasn't managed to run its effects. This needs to\n * be big enough to ensure that a component won't turn up and have its\n * effects run without being re-rendered.\n */\nexport var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;\n/**\n * The frequency with which we'll check for leaked reactions.\n */\nexport var CLEANUP_TIMER_LOOP_MILLIS = 10000;\n//# sourceMappingURL=reactionCleanupTrackingCommon.js.map","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { useCallback, useState } from \"react\";\nvar EMPTY_ARRAY = [];\nexport function useForceUpdate() {\n    var _a = __read(useState(0), 2), setTick = _a[1];\n    var update = useCallback(function () {\n        setTick(function (tick) { return tick + 1; });\n    }, EMPTY_ARRAY);\n    return update;\n}\nvar deprecatedMessages = [];\nexport function useDeprecated(msg) {\n    if (!deprecatedMessages.includes(msg)) {\n        deprecatedMessages.push(msg);\n        console.warn(msg);\n    }\n}\n//# sourceMappingURL=utils.js.map"],"sourceRoot":""}