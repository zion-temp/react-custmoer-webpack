{"version":3,"sources":["webpack://react-custmoer-webpack/./node_modules/rc-motion/es/util/diff.js"],"names":["STATUS_ADD","STATUS_KEEP","STATUS_REMOVE","STATUS_REMOVED","wrapKeyToObject","key","keyObj","String","parseKeys","keys","arguments","length","undefined","map","diffKeys","prevKeys","currentKeys","list","currentIndex","currentLen","prevKeyObjects","currentKeyObjects","forEach","hit","i","currentKeyObj","concat","slice","obj","status","push","_ref","duplicatedKeys","Object","filter","matchKey","_ref2","node"],"mappings":"sNAEWA,EAAa,MACbC,EAAc,OACdC,EAAgB,SAChBC,EAAiB,UACrB,SAASC,EAAgBC,GAC9B,IAAIC,EAUJ,OAPEA,EADED,GAAwB,YAAjB,OAAQA,IAAqB,QAASA,EACtCA,EAEA,CACPA,IAAKA,IAIF,QAAc,OAAc,GAAIC,GAAS,GAAI,CAClDD,IAAKE,OAAOD,EAAOD,OAGhB,SAASG,IACd,IAAIC,EAAOC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAC/E,OAAOD,EAAKI,IAAIT,GAEX,SAASU,IACd,IAAIC,EAAWL,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAC/EM,EAAcN,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAClFO,EAAO,GACPC,EAAe,EACfC,EAAaH,EAAYL,OACzBS,EAAiBZ,EAAUO,GAC3BM,EAAoBb,EAAUQ,GAElCI,EAAeE,SAAQ,SAAUhB,GAG/B,IAFA,IAAIiB,GAAM,EAEDC,EAAIN,EAAcM,EAAIL,EAAYK,GAAK,EAAG,CACjD,IAAIC,EAAgBJ,EAAkBG,GAEtC,GAAIC,EAAcpB,MAAQC,EAAOD,IAAK,CAEhCa,EAAeM,IACjBP,EAAOA,EAAKS,OAAOL,EAAkBM,MAAMT,EAAcM,GAAGX,KAAI,SAAUe,GACxE,OAAO,QAAc,OAAc,GAAIA,GAAM,GAAI,CAC/CC,OAAQ7B,QAGZkB,EAAeM,GAGjBP,EAAKa,MAAK,QAAc,OAAc,GAAIL,GAAgB,GAAI,CAC5DI,OAAQ5B,KAEViB,GAAgB,EAChBK,GAAM,EACN,OAKCA,GACHN,EAAKa,MAAK,QAAc,OAAc,GAAIxB,GAAS,GAAI,CACrDuB,OAAQ3B,QAKVgB,EAAeC,IACjBF,EAAOA,EAAKS,OAAOL,EAAkBM,MAAMT,GAAcL,KAAI,SAAUe,GACrE,OAAO,QAAc,OAAc,GAAIA,GAAM,GAAI,CAC/CC,OAAQ7B,SAUd,IAAIS,EAAO,GACXQ,EAAKK,SAAQ,SAAUS,GACrB,IAAI1B,EAAM0B,EAAK1B,IACfI,EAAKJ,IAAQI,EAAKJ,IAAQ,GAAK,KAEjC,IAAI2B,EAAiBC,OAAOxB,KAAKA,GAAMyB,QAAO,SAAU7B,GACtD,OAAOI,EAAKJ,GAAO,KAiBrB,OAfA2B,EAAeV,SAAQ,SAAUa,IAE/BlB,EAAOA,EAAKiB,QAAO,SAAUE,GAC3B,IAAI/B,EAAM+B,EAAM/B,IACZwB,EAASO,EAAMP,OACnB,OAAOxB,IAAQ8B,GAAYN,IAAW3B,MAGnCoB,SAAQ,SAAUe,GACjBA,EAAKhC,MAAQ8B,IAEfE,EAAKR,OAAS5B,SAIbgB","file":"js/2378.4269c1a890.js","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nexport var STATUS_ADD = 'add';\nexport var STATUS_KEEP = 'keep';\nexport var STATUS_REMOVE = 'remove';\nexport var STATUS_REMOVED = 'removed';\nexport function wrapKeyToObject(key) {\n  var keyObj;\n\n  if (key && _typeof(key) === 'object' && 'key' in key) {\n    keyObj = key;\n  } else {\n    keyObj = {\n      key: key\n    };\n  }\n\n  return _objectSpread(_objectSpread({}, keyObj), {}, {\n    key: String(keyObj.key)\n  });\n}\nexport function parseKeys() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return keys.map(wrapKeyToObject);\n}\nexport function diffKeys() {\n  var prevKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var currentKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var list = [];\n  var currentIndex = 0;\n  var currentLen = currentKeys.length;\n  var prevKeyObjects = parseKeys(prevKeys);\n  var currentKeyObjects = parseKeys(currentKeys); // Check prev keys to insert or keep\n\n  prevKeyObjects.forEach(function (keyObj) {\n    var hit = false;\n\n    for (var i = currentIndex; i < currentLen; i += 1) {\n      var currentKeyObj = currentKeyObjects[i];\n\n      if (currentKeyObj.key === keyObj.key) {\n        // New added keys should add before current key\n        if (currentIndex < i) {\n          list = list.concat(currentKeyObjects.slice(currentIndex, i).map(function (obj) {\n            return _objectSpread(_objectSpread({}, obj), {}, {\n              status: STATUS_ADD\n            });\n          }));\n          currentIndex = i;\n        }\n\n        list.push(_objectSpread(_objectSpread({}, currentKeyObj), {}, {\n          status: STATUS_KEEP\n        }));\n        currentIndex += 1;\n        hit = true;\n        break;\n      }\n    } // If not hit, it means key is removed\n\n\n    if (!hit) {\n      list.push(_objectSpread(_objectSpread({}, keyObj), {}, {\n        status: STATUS_REMOVE\n      }));\n    }\n  }); // Add rest to the list\n\n  if (currentIndex < currentLen) {\n    list = list.concat(currentKeyObjects.slice(currentIndex).map(function (obj) {\n      return _objectSpread(_objectSpread({}, obj), {}, {\n        status: STATUS_ADD\n      });\n    }));\n  }\n  /**\n   * Merge same key when it remove and add again:\n   *    [1 - add, 2 - keep, 1 - remove] -> [1 - keep, 2 - keep]\n   */\n\n\n  var keys = {};\n  list.forEach(function (_ref) {\n    var key = _ref.key;\n    keys[key] = (keys[key] || 0) + 1;\n  });\n  var duplicatedKeys = Object.keys(keys).filter(function (key) {\n    return keys[key] > 1;\n  });\n  duplicatedKeys.forEach(function (matchKey) {\n    // Remove `STATUS_REMOVE` node.\n    list = list.filter(function (_ref2) {\n      var key = _ref2.key,\n          status = _ref2.status;\n      return key !== matchKey || status !== STATUS_REMOVE;\n    }); // Update `STATUS_ADD` to `STATUS_KEEP`\n\n    list.forEach(function (node) {\n      if (node.key === matchKey) {\n        // eslint-disable-next-line no-param-reassign\n        node.status = STATUS_KEEP;\n      }\n    });\n  });\n  return list;\n}"],"sourceRoot":""}